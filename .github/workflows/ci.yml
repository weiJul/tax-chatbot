name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements.txt
        pip install pytest black isort flake8

    - name: Code formatting check
      run: |
        black --check --diff src/
        isort --check-only --diff src/

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Test environment setup
      run: |
        python -c "import torch; print(f'PyTorch version: {torch.__version__}')"
        python -c "import transformers; print(f'Transformers version: {transformers.__version__}')"
        python -c "import chromadb; print(f'ChromaDB version: {chromadb.__version__}')"

    - name: Run basic tests
      run: |
        # Test core imports
        python -c "from src.core.config import ConfigManager; print('✅ Config import successful')"
        python -c "from src.utils.memory_monitor import memory_monitor; print('✅ Memory monitor import successful')"
        python -c "from src.utils.jurisdiction_detector import jurisdiction_detector; print('✅ Jurisdiction detector import successful')"
        
        # Test configuration loading
        python -c "from src.core.config import ConfigManager; config = ConfigManager(); print('✅ Configuration loaded')"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run security checks
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Check documentation
      run: |
        # Check that all referenced files exist
        test -f README.md
        test -f ARCHITECTURE.md
        test -f LICENSE
        test -f requirements.txt
        test -f config.yaml
        echo "✅ All referenced documentation files exist"

    - name: Validate README links
      run: |
        # Check for broken internal links (basic check)
        grep -E '\[.*\]\(.*\.md\)' README.md | while read -r line; do
          file=$(echo "$line" | sed -E 's/.*\[.*\]\(([^)]*\.md)\).*/\1/')
          if [ ! -f "$file" ]; then
            echo "❌ Broken link to: $file"
            exit 1
          fi
        done
        echo "✅ README internal links validated"

  build-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build setuptools wheel

    - name: Check if package can be built
      run: |
        # Test package structure
        python setup.py check
        echo "✅ Package structure validated"